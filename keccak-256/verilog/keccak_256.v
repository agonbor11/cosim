// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="keccak_256_keccak_256,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=5968,HLS_SYN_LUT=11087,HLS_VERSION=2020_1}" *)

module keccak_256 (
        ap_clk,
        ap_rst_n,
        m_axi_data_AWVALID,
        m_axi_data_AWREADY,
        m_axi_data_AWADDR,
        m_axi_data_AWID,
        m_axi_data_AWLEN,
        m_axi_data_AWSIZE,
        m_axi_data_AWBURST,
        m_axi_data_AWLOCK,
        m_axi_data_AWCACHE,
        m_axi_data_AWPROT,
        m_axi_data_AWQOS,
        m_axi_data_AWREGION,
        m_axi_data_AWUSER,
        m_axi_data_WVALID,
        m_axi_data_WREADY,
        m_axi_data_WDATA,
        m_axi_data_WSTRB,
        m_axi_data_WLAST,
        m_axi_data_WID,
        m_axi_data_WUSER,
        m_axi_data_ARVALID,
        m_axi_data_ARREADY,
        m_axi_data_ARADDR,
        m_axi_data_ARID,
        m_axi_data_ARLEN,
        m_axi_data_ARSIZE,
        m_axi_data_ARBURST,
        m_axi_data_ARLOCK,
        m_axi_data_ARCACHE,
        m_axi_data_ARPROT,
        m_axi_data_ARQOS,
        m_axi_data_ARREGION,
        m_axi_data_ARUSER,
        m_axi_data_RVALID,
        m_axi_data_RREADY,
        m_axi_data_RDATA,
        m_axi_data_RLAST,
        m_axi_data_RID,
        m_axi_data_RUSER,
        m_axi_data_RRESP,
        m_axi_data_BVALID,
        m_axi_data_BREADY,
        m_axi_data_BRESP,
        m_axi_data_BID,
        m_axi_data_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 67'd1;
parameter    ap_ST_fsm_state2 = 67'd2;
parameter    ap_ST_fsm_state3 = 67'd4;
parameter    ap_ST_fsm_state4 = 67'd8;
parameter    ap_ST_fsm_state5 = 67'd16;
parameter    ap_ST_fsm_state6 = 67'd32;
parameter    ap_ST_fsm_state7 = 67'd64;
parameter    ap_ST_fsm_state8 = 67'd128;
parameter    ap_ST_fsm_state9 = 67'd256;
parameter    ap_ST_fsm_state10 = 67'd512;
parameter    ap_ST_fsm_state11 = 67'd1024;
parameter    ap_ST_fsm_state12 = 67'd2048;
parameter    ap_ST_fsm_pp2_stage0 = 67'd4096;
parameter    ap_ST_fsm_state16 = 67'd8192;
parameter    ap_ST_fsm_state17 = 67'd16384;
parameter    ap_ST_fsm_state18 = 67'd32768;
parameter    ap_ST_fsm_state19 = 67'd65536;
parameter    ap_ST_fsm_state20 = 67'd131072;
parameter    ap_ST_fsm_state21 = 67'd262144;
parameter    ap_ST_fsm_state22 = 67'd524288;
parameter    ap_ST_fsm_state23 = 67'd1048576;
parameter    ap_ST_fsm_state24 = 67'd2097152;
parameter    ap_ST_fsm_state25 = 67'd4194304;
parameter    ap_ST_fsm_state26 = 67'd8388608;
parameter    ap_ST_fsm_state27 = 67'd16777216;
parameter    ap_ST_fsm_state28 = 67'd33554432;
parameter    ap_ST_fsm_state29 = 67'd67108864;
parameter    ap_ST_fsm_state30 = 67'd134217728;
parameter    ap_ST_fsm_state31 = 67'd268435456;
parameter    ap_ST_fsm_state32 = 67'd536870912;
parameter    ap_ST_fsm_state33 = 67'd1073741824;
parameter    ap_ST_fsm_state34 = 67'd2147483648;
parameter    ap_ST_fsm_state35 = 67'd4294967296;
parameter    ap_ST_fsm_state36 = 67'd8589934592;
parameter    ap_ST_fsm_state37 = 67'd17179869184;
parameter    ap_ST_fsm_state38 = 67'd34359738368;
parameter    ap_ST_fsm_state39 = 67'd68719476736;
parameter    ap_ST_fsm_state40 = 67'd137438953472;
parameter    ap_ST_fsm_state41 = 67'd274877906944;
parameter    ap_ST_fsm_state42 = 67'd549755813888;
parameter    ap_ST_fsm_state43 = 67'd1099511627776;
parameter    ap_ST_fsm_state44 = 67'd2199023255552;
parameter    ap_ST_fsm_state45 = 67'd4398046511104;
parameter    ap_ST_fsm_state46 = 67'd8796093022208;
parameter    ap_ST_fsm_state47 = 67'd17592186044416;
parameter    ap_ST_fsm_state48 = 67'd35184372088832;
parameter    ap_ST_fsm_state49 = 67'd70368744177664;
parameter    ap_ST_fsm_state50 = 67'd140737488355328;
parameter    ap_ST_fsm_state51 = 67'd281474976710656;
parameter    ap_ST_fsm_state52 = 67'd562949953421312;
parameter    ap_ST_fsm_state53 = 67'd1125899906842624;
parameter    ap_ST_fsm_state54 = 67'd2251799813685248;
parameter    ap_ST_fsm_state55 = 67'd4503599627370496;
parameter    ap_ST_fsm_state56 = 67'd9007199254740992;
parameter    ap_ST_fsm_state57 = 67'd18014398509481984;
parameter    ap_ST_fsm_state58 = 67'd36028797018963968;
parameter    ap_ST_fsm_state59 = 67'd72057594037927936;
parameter    ap_ST_fsm_state60 = 67'd144115188075855872;
parameter    ap_ST_fsm_state61 = 67'd288230376151711744;
parameter    ap_ST_fsm_state62 = 67'd576460752303423488;
parameter    ap_ST_fsm_state63 = 67'd1152921504606846976;
parameter    ap_ST_fsm_pp3_stage0 = 67'd2305843009213693952;
parameter    ap_ST_fsm_state68 = 67'd4611686018427387904;
parameter    ap_ST_fsm_state69 = 67'd9223372036854775808;
parameter    ap_ST_fsm_state70 = 67'd18446744073709551616;
parameter    ap_ST_fsm_state71 = 67'd36893488147419103232;
parameter    ap_ST_fsm_state72 = 67'd73786976294838206464;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_USER_VALUE = 0;
parameter    C_M_AXI_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_AWVALID;
input   m_axi_data_AWREADY;
output  [C_M_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_data_AWADDR;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_AWID;
output  [7:0] m_axi_data_AWLEN;
output  [2:0] m_axi_data_AWSIZE;
output  [1:0] m_axi_data_AWBURST;
output  [1:0] m_axi_data_AWLOCK;
output  [3:0] m_axi_data_AWCACHE;
output  [2:0] m_axi_data_AWPROT;
output  [3:0] m_axi_data_AWQOS;
output  [3:0] m_axi_data_AWREGION;
output  [C_M_AXI_DATA_AWUSER_WIDTH - 1:0] m_axi_data_AWUSER;
output   m_axi_data_WVALID;
input   m_axi_data_WREADY;
output  [C_M_AXI_DATA_DATA_WIDTH - 1:0] m_axi_data_WDATA;
output  [C_M_AXI_DATA_WSTRB_WIDTH - 1:0] m_axi_data_WSTRB;
output   m_axi_data_WLAST;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_WID;
output  [C_M_AXI_DATA_WUSER_WIDTH - 1:0] m_axi_data_WUSER;
output   m_axi_data_ARVALID;
input   m_axi_data_ARREADY;
output  [C_M_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_data_ARADDR;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_ARID;
output  [7:0] m_axi_data_ARLEN;
output  [2:0] m_axi_data_ARSIZE;
output  [1:0] m_axi_data_ARBURST;
output  [1:0] m_axi_data_ARLOCK;
output  [3:0] m_axi_data_ARCACHE;
output  [2:0] m_axi_data_ARPROT;
output  [3:0] m_axi_data_ARQOS;
output  [3:0] m_axi_data_ARREGION;
output  [C_M_AXI_DATA_ARUSER_WIDTH - 1:0] m_axi_data_ARUSER;
input   m_axi_data_RVALID;
output   m_axi_data_RREADY;
input  [C_M_AXI_DATA_DATA_WIDTH - 1:0] m_axi_data_RDATA;
input   m_axi_data_RLAST;
input  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_RID;
input  [C_M_AXI_DATA_RUSER_WIDTH - 1:0] m_axi_data_RUSER;
input  [1:0] m_axi_data_RRESP;
input   m_axi_data_BVALID;
output   m_axi_data_BREADY;
input  [1:0] m_axi_data_BRESP;
input  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_BID;
input  [C_M_AXI_DATA_BUSER_WIDTH - 1:0] m_axi_data_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [66:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] M;
wire   [31:0] l;
wire   [63:0] O;
reg    data_blk_n_AR;
wire    ap_CS_fsm_state6;
reg    data_blk_n_R;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln176_1_reg_945;
reg    data_blk_n_B;
wire    ap_CS_fsm_state72;
reg    data_blk_n_AW;
wire    ap_CS_fsm_state63;
reg    data_blk_n_W;
reg    ap_enable_reg_pp3_iter3;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond7_0_reg_1108;
reg   [0:0] exitcond7_0_reg_1108_pp3_iter2_reg;
reg    data_AWVALID;
wire    data_AWREADY;
reg    data_WVALID;
wire    data_WREADY;
reg    data_ARVALID;
wire    data_ARREADY;
wire    data_RVALID;
reg    data_RREADY;
wire   [7:0] data_RDATA;
wire    data_RLAST;
wire   [0:0] data_RID;
wire   [0:0] data_RUSER;
wire   [1:0] data_RRESP;
wire    data_BVALID;
reg    data_BREADY;
wire   [1:0] data_BRESP;
wire   [0:0] data_BID;
wire   [0:0] data_BUSER;
reg   [7:0] i_reg_387;
reg   [7:0] i_reg_387_pp2_iter1_reg;
wire    ap_block_state13_pp2_stage0_iter0;
reg    ap_block_state14_pp2_stage0_iter1;
wire    ap_block_state15_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [5:0] loop_index_0_reg_422;
reg   [5:0] loop_index_0_reg_422_pp3_iter1_reg;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state64_pp3_stage0_iter0;
wire    ap_block_state65_pp3_stage0_iter1;
wire    ap_block_state66_pp3_stage0_iter2;
wire    ap_block_state67_pp3_stage0_iter3;
reg    ap_block_state67_io;
reg    ap_block_pp3_stage0_11001;
reg   [63:0] O_read_reg_893;
reg   [31:0] l_read_reg_898;
reg   [63:0] M_read_reg_909;
wire   [4:0] empty_24_fu_447_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] empty_27_fu_464_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln176_fu_475_p2;
wire    ap_CS_fsm_state5;
reg   [63:0] data_addr_reg_934;
wire   [30:0] trunc_ln176_fu_485_p1;
reg   [30:0] trunc_ln176_reg_940;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln176_1_fu_492_p2;
reg   [0:0] icmp_ln176_1_reg_945_pp2_iter1_reg;
wire   [7:0] add_ln176_fu_497_p2;
reg   [7:0] add_ln176_reg_949;
reg    ap_enable_reg_pp2_iter0;
reg   [7:0] data_addr_read_reg_954;
wire   [0:0] icmp_ln185_fu_521_p2;
reg   [0:0] icmp_ln185_reg_959;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
reg   [0:0] tmp_reg_969;
wire   [64:0] grp_fu_530_p2;
reg   [64:0] mul_ln126_reg_975;
wire    ap_CS_fsm_state53;
reg   [24:0] tmp_7_reg_980;
wire   [24:0] blocks_fu_586_p3;
reg   [24:0] blocks_reg_986;
wire    ap_CS_fsm_state54;
wire   [23:0] y_1_fu_602_p2;
reg   [23:0] y_1_reg_994;
wire    ap_CS_fsm_state55;
wire   [4:0] select_ln130_fu_708_p3;
reg   [4:0] select_ln130_reg_999;
wire   [0:0] icmp_ln129_fu_597_p2;
reg   [63:0] data_addr_1_reg_1004;
wire   [4:0] add_ln132_fu_727_p2;
reg   [4:0] add_ln132_reg_1013;
wire    ap_CS_fsm_state56;
wire   [7:0] shl_ln1_fu_738_p3;
reg   [7:0] shl_ln1_reg_1018;
wire   [0:0] icmp_ln132_fu_721_p2;
wire   [7:0] P_q1;
reg   [7:0] P_load_reg_1038;
wire    ap_CS_fsm_state57;
wire   [7:0] P_q0;
reg   [7:0] P_load_1_reg_1043;
reg   [7:0] P_load_2_reg_1058;
wire    ap_CS_fsm_state58;
reg   [7:0] P_load_3_reg_1063;
reg   [4:0] A_addr_14_reg_1078;
wire    ap_CS_fsm_state59;
reg   [7:0] P_load_4_reg_1083;
reg   [7:0] P_load_5_reg_1088;
wire   [63:0] xor_ln133_fu_841_p2;
reg   [63:0] xor_ln133_reg_1103;
wire    ap_CS_fsm_state60;
wire   [0:0] exitcond7_0_fu_847_p2;
reg   [0:0] exitcond7_0_reg_1108_pp3_iter1_reg;
wire   [5:0] empty_33_fu_853_p2;
reg   [5:0] empty_33_reg_1112;
reg    ap_enable_reg_pp3_iter0;
wire   [63:0] A_q0;
reg   [63:0] A_load_25_reg_1122;
reg    ap_enable_reg_pp3_iter1;
wire   [7:0] empty_37_fu_889_p1;
reg   [7:0] empty_37_reg_1127;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state13;
reg    ap_enable_reg_pp2_iter2;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state64;
reg    ap_enable_reg_pp3_iter2;
reg   [4:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [63:0] A_d0;
reg    A_ce1;
reg    A_we1;
wire   [63:0] A_q1;
reg   [7:0] P_address0;
reg    P_ce0;
reg    P_we0;
reg   [7:0] P_d0;
reg   [7:0] P_address1;
reg    P_ce1;
wire    grp_keccakf_1_fu_434_ap_start;
wire    grp_keccakf_1_fu_434_ap_done;
wire    grp_keccakf_1_fu_434_ap_idle;
wire    grp_keccakf_1_fu_434_ap_ready;
wire   [4:0] grp_keccakf_1_fu_434_A_address0;
wire    grp_keccakf_1_fu_434_A_ce0;
wire    grp_keccakf_1_fu_434_A_we0;
wire   [63:0] grp_keccakf_1_fu_434_A_d0;
wire   [4:0] grp_keccakf_1_fu_434_A_address1;
wire    grp_keccakf_1_fu_434_A_ce1;
wire    grp_keccakf_1_fu_434_A_we1;
wire   [63:0] grp_keccakf_1_fu_434_A_d1;
reg   [4:0] empty_reg_365;
wire   [0:0] exitcond2312_fu_441_p2;
reg   [7:0] empty_25_reg_376;
wire   [0:0] exitcond2211_fu_458_p2;
wire    ap_CS_fsm_state3;
reg   [7:0] ap_phi_mux_i_phi_fu_391_p4;
reg   [23:0] y_reg_399;
wire    ap_CS_fsm_state62;
reg   [4:0] x_reg_410;
wire    ap_CS_fsm_state61;
reg   [5:0] ap_phi_mux_loop_index_0_phi_fu_426_p4;
reg    grp_keccakf_1_fu_434_ap_start_reg;
wire   [63:0] p_cast3_fu_453_p1;
wire   [63:0] p_cast2_fu_470_p1;
wire   [63:0] i_cast5_fu_503_p1;
wire   [63:0] zext_ln181_fu_508_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln133_1_fu_746_p1;
wire   [63:0] zext_ln133_2_fu_757_p1;
wire   [63:0] zext_ln133_3_fu_767_p1;
wire   [63:0] zext_ln133_4_fu_777_p1;
wire   [63:0] zext_ln133_5_fu_787_p1;
wire   [63:0] zext_ln133_6_fu_797_p1;
wire   [63:0] zext_ln133_fu_802_p1;
wire   [63:0] zext_ln133_7_fu_812_p1;
wire   [63:0] zext_ln133_8_fu_822_p1;
wire   [63:0] p_cast7_fu_869_p1;
wire    ap_block_pp3_stage0_01001;
wire   [30:0] i_cast_fu_488_p1;
wire   [8:0] grp_fu_512_p1;
wire   [8:0] grp_fu_512_p2;
wire   [8:0] trunc_ln185_fu_517_p1;
wire   [33:0] grp_fu_530_p0;
wire   [64:0] sub_ln126_fu_553_p2;
wire   [24:0] tmp_6_fu_558_p4;
wire   [24:0] select_ln126_fu_568_p3;
wire   [24:0] sub_ln126_1_fu_574_p2;
wire   [24:0] select_ln126_1_fu_580_p3;
wire   [24:0] zext_ln129_fu_593_p1;
wire   [21:0] trunc_ln130_fu_608_p1;
wire   [29:0] shl_ln130_1_fu_620_p3;
wire   [4:0] trunc_ln130_5_fu_632_p1;
wire   [0:0] trunc_ln130_6_fu_644_p1;
wire   [31:0] zext_ln130_fu_628_p1;
wire   [31:0] shl_ln_fu_612_p3;
wire   [10:0] trunc_ln130_2_fu_648_p3;
wire   [10:0] trunc_ln130_1_fu_636_p3;
wire   [31:0] add_ln130_fu_656_p2;
wire   [10:0] add_ln130_1_fu_662_p2;
wire   [10:0] sub_ln130_fu_676_p2;
wire   [4:0] trunc_ln130_3_fu_682_p4;
wire   [0:0] tmp_8_fu_668_p3;
wire   [4:0] sub_ln130_1_fu_692_p2;
wire   [4:0] trunc_ln130_4_fu_698_p4;
wire   [4:0] add_ln133_fu_733_p2;
wire   [7:0] or_ln133_fu_751_p2;
wire   [7:0] or_ln133_1_fu_762_p2;
wire   [7:0] or_ln133_2_fu_772_p2;
wire   [7:0] or_ln133_3_fu_782_p2;
wire   [7:0] or_ln133_4_fu_792_p2;
wire   [7:0] or_ln133_5_fu_807_p2;
wire   [7:0] or_ln133_6_fu_817_p2;
wire   [63:0] or_ln133_s_fu_827_p9;
wire   [1:0] p_cast1_fu_859_p4;
wire   [5:0] empty_35_fu_874_p2;
wire   [63:0] p_cast8_fu_880_p1;
wire   [63:0] empty_36_fu_884_p2;
reg    grp_fu_512_ap_start;
wire    grp_fu_512_ap_done;
reg   [66:0] ap_NS_fsm;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 67'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 grp_keccakf_1_fu_434_ap_start_reg = 1'b0;
end

keccak_256_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .M(M),
    .l(l),
    .O(O),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

keccak_256_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_CACHE_VALUE ))
data_m_axi_U(
    .AWVALID(m_axi_data_AWVALID),
    .AWREADY(m_axi_data_AWREADY),
    .AWADDR(m_axi_data_AWADDR),
    .AWID(m_axi_data_AWID),
    .AWLEN(m_axi_data_AWLEN),
    .AWSIZE(m_axi_data_AWSIZE),
    .AWBURST(m_axi_data_AWBURST),
    .AWLOCK(m_axi_data_AWLOCK),
    .AWCACHE(m_axi_data_AWCACHE),
    .AWPROT(m_axi_data_AWPROT),
    .AWQOS(m_axi_data_AWQOS),
    .AWREGION(m_axi_data_AWREGION),
    .AWUSER(m_axi_data_AWUSER),
    .WVALID(m_axi_data_WVALID),
    .WREADY(m_axi_data_WREADY),
    .WDATA(m_axi_data_WDATA),
    .WSTRB(m_axi_data_WSTRB),
    .WLAST(m_axi_data_WLAST),
    .WID(m_axi_data_WID),
    .WUSER(m_axi_data_WUSER),
    .ARVALID(m_axi_data_ARVALID),
    .ARREADY(m_axi_data_ARREADY),
    .ARADDR(m_axi_data_ARADDR),
    .ARID(m_axi_data_ARID),
    .ARLEN(m_axi_data_ARLEN),
    .ARSIZE(m_axi_data_ARSIZE),
    .ARBURST(m_axi_data_ARBURST),
    .ARLOCK(m_axi_data_ARLOCK),
    .ARCACHE(m_axi_data_ARCACHE),
    .ARPROT(m_axi_data_ARPROT),
    .ARQOS(m_axi_data_ARQOS),
    .ARREGION(m_axi_data_ARREGION),
    .ARUSER(m_axi_data_ARUSER),
    .RVALID(m_axi_data_RVALID),
    .RREADY(m_axi_data_RREADY),
    .RDATA(m_axi_data_RDATA),
    .RLAST(m_axi_data_RLAST),
    .RID(m_axi_data_RID),
    .RUSER(m_axi_data_RUSER),
    .RRESP(m_axi_data_RRESP),
    .BVALID(m_axi_data_BVALID),
    .BREADY(m_axi_data_BREADY),
    .BRESP(m_axi_data_BRESP),
    .BID(m_axi_data_BID),
    .BUSER(m_axi_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data_ARVALID),
    .I_ARREADY(data_ARREADY),
    .I_ARADDR(data_addr_reg_934),
    .I_ARID(1'd0),
    .I_ARLEN(l_read_reg_898),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(data_RVALID),
    .I_RREADY(data_RREADY),
    .I_RDATA(data_RDATA),
    .I_RID(data_RID),
    .I_RUSER(data_RUSER),
    .I_RRESP(data_RRESP),
    .I_RLAST(data_RLAST),
    .I_AWVALID(data_AWVALID),
    .I_AWREADY(data_AWREADY),
    .I_AWADDR(data_addr_1_reg_1004),
    .I_AWID(1'd0),
    .I_AWLEN(32'd32),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(data_WVALID),
    .I_WREADY(data_WREADY),
    .I_WDATA(empty_37_reg_1127),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(data_BVALID),
    .I_BREADY(data_BREADY),
    .I_BRESP(data_BRESP),
    .I_BID(data_BID),
    .I_BUSER(data_BUSER)
);

keccak_256_A #(
    .DataWidth( 64 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(A_d0),
    .q0(A_q0),
    .address1(grp_keccakf_1_fu_434_A_address1),
    .ce1(A_ce1),
    .we1(A_we1),
    .d1(grp_keccakf_1_fu_434_A_d1),
    .q1(A_q1)
);

keccak_256_P #(
    .DataWidth( 8 ),
    .AddressRange( 136 ),
    .AddressWidth( 8 ))
P_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(P_address0),
    .ce0(P_ce0),
    .we0(P_we0),
    .d0(P_d0),
    .q0(P_q0),
    .address1(P_address1),
    .ce1(P_ce1),
    .q1(P_q1)
);

keccak_256_keccakf_1 grp_keccakf_1_fu_434(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_keccakf_1_fu_434_ap_start),
    .ap_done(grp_keccakf_1_fu_434_ap_done),
    .ap_idle(grp_keccakf_1_fu_434_ap_idle),
    .ap_ready(grp_keccakf_1_fu_434_ap_ready),
    .A_address0(grp_keccakf_1_fu_434_A_address0),
    .A_ce0(grp_keccakf_1_fu_434_A_ce0),
    .A_we0(grp_keccakf_1_fu_434_A_we0),
    .A_d0(grp_keccakf_1_fu_434_A_d0),
    .A_q0(A_q0),
    .A_address1(grp_keccakf_1_fu_434_A_address1),
    .A_ce1(grp_keccakf_1_fu_434_A_ce1),
    .A_we1(grp_keccakf_1_fu_434_A_we1),
    .A_d1(grp_keccakf_1_fu_434_A_d1),
    .A_q1(A_q1)
);

keccak_256_srem_32s_9ns_9_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
srem_32s_9ns_9_36_seq_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_512_ap_start),
    .done(grp_fu_512_ap_done),
    .din0(l_read_reg_898),
    .din1(grp_fu_512_p1),
    .ce(1'b1),
    .dout(grp_fu_512_p2)
);

keccak_256_mul_34ns_32s_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 65 ))
mul_34ns_32s_65_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_530_p0),
    .din1(l_read_reg_898),
    .ce(1'b1),
    .dout(grp_fu_530_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state13)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state64) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state64)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state64);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
            ap_enable_reg_pp3_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_keccakf_1_fu_434_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln132_fu_721_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
            grp_keccakf_1_fu_434_ap_start_reg <= 1'b1;
        end else if ((grp_keccakf_1_fu_434_ap_ready == 1'b1)) begin
            grp_keccakf_1_fu_434_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_25_reg_376 <= 8'd0;
    end else if (((exitcond2211_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_25_reg_376 <= empty_27_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2312_fu_441_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_reg_365 <= empty_24_fu_447_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_365 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_387 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln176_1_reg_945 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        i_reg_387 <= add_ln176_reg_949;
    end
end

always @ (posedge ap_clk) begin
    if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
        loop_index_0_reg_422 <= 6'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond7_0_reg_1108 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        loop_index_0_reg_422 <= empty_33_reg_1112;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
        x_reg_410 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        x_reg_410 <= add_ln132_reg_1013;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_keccakf_1_fu_434_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state62))) begin
        y_reg_399 <= y_1_reg_994;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        y_reg_399 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        A_addr_14_reg_1078 <= zext_ln133_fu_802_p1;
        P_load_4_reg_1083 <= P_q0;
        P_load_5_reg_1088 <= P_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond7_0_reg_1108 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        A_load_25_reg_1122 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        M_read_reg_909 <= M;
        O_read_reg_893 <= O;
        l_read_reg_898 <= l;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        P_load_1_reg_1043 <= P_q0;
        P_load_reg_1038 <= P_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        P_load_2_reg_1058 <= P_q0;
        P_load_3_reg_1063 <= P_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        add_ln132_reg_1013 <= add_ln132_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln176_reg_949 <= add_ln176_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        blocks_reg_986 <= blocks_fu_586_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_597_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state55))) begin
        data_addr_1_reg_1004 <= O_read_reg_893;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln176_1_reg_945 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        data_addr_read_reg_954 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        data_addr_reg_934 <= M_read_reg_909;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        empty_33_reg_1112 <= empty_33_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_0_reg_1108_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        empty_37_reg_1127 <= empty_37_fu_889_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        exitcond7_0_reg_1108 <= exitcond7_0_fu_847_p2;
        exitcond7_0_reg_1108_pp3_iter1_reg <= exitcond7_0_reg_1108;
        loop_index_0_reg_422_pp3_iter1_reg <= loop_index_0_reg_422;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        exitcond7_0_reg_1108_pp3_iter2_reg <= exitcond7_0_reg_1108_pp3_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_reg_387_pp2_iter1_reg <= i_reg_387;
        icmp_ln176_1_reg_945 <= icmp_ln176_1_fu_492_p2;
        icmp_ln176_1_reg_945_pp2_iter1_reg <= icmp_ln176_1_reg_945;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        icmp_ln185_reg_959 <= icmp_ln185_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_reg_959 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        mul_ln126_reg_975 <= grp_fu_530_p2;
        tmp_7_reg_980 <= {{grp_fu_530_p2[64:40]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
        select_ln130_reg_999 <= select_ln130_fu_708_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_fu_721_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state56))) begin
        shl_ln1_reg_1018[7 : 3] <= shl_ln1_fu_738_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_reg_959 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        tmp_reg_969 <= l_read_reg_898[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        trunc_ln176_reg_940 <= trunc_ln176_fu_485_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        xor_ln133_reg_1103 <= xor_ln133_fu_841_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        y_1_reg_994 <= y_1_fu_602_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        A_address0 = p_cast7_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        A_address0 = A_addr_14_reg_1078;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        A_address0 = zext_ln133_fu_802_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = p_cast3_fu_453_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        A_address0 = grp_keccakf_1_fu_434_A_address0;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        A_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        A_ce0 = grp_keccakf_1_fu_434_A_ce0;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        A_ce1 = grp_keccakf_1_fu_434_A_ce1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        A_d0 = xor_ln133_reg_1103;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_d0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        A_d0 = grp_keccakf_1_fu_434_A_d0;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | ((exitcond2312_fu_441_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        A_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        A_we0 = grp_keccakf_1_fu_434_A_we0;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        A_we1 = grp_keccakf_1_fu_434_A_we1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        P_address0 = zext_ln133_7_fu_812_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        P_address0 = zext_ln133_5_fu_787_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        P_address0 = zext_ln133_3_fu_767_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        P_address0 = zext_ln133_2_fu_757_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        P_address0 = 64'd135;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        P_address0 = zext_ln181_fu_508_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        P_address0 = i_cast5_fu_503_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        P_address0 = p_cast2_fu_470_p1;
    end else begin
        P_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        P_address1 = zext_ln133_8_fu_822_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        P_address1 = zext_ln133_6_fu_797_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        P_address1 = zext_ln133_4_fu_777_p1;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        P_address1 = zext_ln133_1_fu_746_p1;
    end else begin
        P_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        P_ce0 = 1'b1;
    end else begin
        P_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56))) begin
        P_ce1 = 1'b1;
    end else begin
        P_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        P_d0 = 8'd128;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        P_d0 = 8'd1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        P_d0 = data_addr_read_reg_954;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        P_d0 = 8'd0;
    end else begin
        P_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln176_1_reg_945_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((exitcond2211_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        P_we0 = 1'b1;
    end else begin
        P_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln176_1_fu_492_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7_0_fu_847_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state64 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state64 = 1'b0;
    end
end

always @ (*) begin
    if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln176_1_reg_945 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_391_p4 = add_ln176_reg_949;
    end else begin
        ap_phi_mux_i_phi_fu_391_p4 = i_reg_387;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond7_0_reg_1108 == 1'd0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_loop_index_0_phi_fu_426_p4 = empty_33_reg_1112;
    end else begin
        ap_phi_mux_loop_index_0_phi_fu_426_p4 = loop_index_0_reg_422;
    end
end

always @ (*) begin
    if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        data_ARVALID = 1'b1;
    end else begin
        data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
        data_AWVALID = 1'b1;
    end else begin
        data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
        data_BREADY = 1'b1;
    end else begin
        data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln176_1_reg_945 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        data_RREADY = 1'b1;
    end else begin
        data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond7_0_reg_1108_pp3_iter2_reg == 1'd0) & (ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        data_WVALID = 1'b1;
    end else begin
        data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_blk_n_AR = m_axi_data_ARREADY;
    end else begin
        data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        data_blk_n_AW = m_axi_data_AWREADY;
    end else begin
        data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        data_blk_n_B = m_axi_data_BVALID;
    end else begin
        data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln176_1_reg_945 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        data_blk_n_R = m_axi_data_RVALID;
    end else begin
        data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond7_0_reg_1108_pp3_iter2_reg == 1'd0) & (ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        data_blk_n_W = m_axi_data_WREADY;
    end else begin
        data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_512_ap_start = 1'b1;
    end else begin
        grp_fu_512_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2312_fu_441_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2211_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln176_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln176_1_fu_492_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln176_1_fu_492_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((icmp_ln129_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((icmp_ln132_fu_721_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state62 : begin
            if (((grp_keccakf_1_fu_434_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond7_0_fu_847_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond7_0_fu_847_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln130_1_fu_662_p2 = (trunc_ln130_2_fu_648_p3 + trunc_ln130_1_fu_636_p3);

assign add_ln130_fu_656_p2 = (zext_ln130_fu_628_p1 + shl_ln_fu_612_p3);

assign add_ln132_fu_727_p2 = (x_reg_410 + 5'd1);

assign add_ln133_fu_733_p2 = (select_ln130_reg_999 + x_reg_410);

assign add_ln176_fu_497_p2 = (ap_phi_mux_i_phi_fu_391_p4 + 8'd1);

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd66];

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((data_RVALID == 1'b0) & (icmp_ln176_1_reg_945 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((data_RVALID == 1'b0) & (icmp_ln176_1_reg_945 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state67_io) & (ap_enable_reg_pp3_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state67_io) & (ap_enable_reg_pp3_iter3 == 1'b1));
end

assign ap_block_state13_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp2_stage0_iter1 = ((data_RVALID == 1'b0) & (icmp_ln176_1_reg_945 == 1'd0));
end

assign ap_block_state15_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state67_io = ((data_WREADY == 1'b0) & (exitcond7_0_reg_1108_pp3_iter2_reg == 1'd0));
end

assign ap_block_state67_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign blocks_fu_586_p3 = ((icmp_ln185_reg_959[0:0] === 1'b1) ? select_ln126_1_fu_580_p3 : 25'd1);

assign empty_24_fu_447_p2 = (empty_reg_365 + 5'd1);

assign empty_27_fu_464_p2 = (empty_25_reg_376 + 8'd1);

assign empty_33_fu_853_p2 = (ap_phi_mux_loop_index_0_phi_fu_426_p4 + 6'd1);

assign empty_35_fu_874_p2 = loop_index_0_reg_422_pp3_iter1_reg << 6'd3;

assign empty_36_fu_884_p2 = A_load_25_reg_1122 >> p_cast8_fu_880_p1;

assign empty_37_fu_889_p1 = empty_36_fu_884_p2[7:0];

assign exitcond2211_fu_458_p2 = ((empty_25_reg_376 == 8'd136) ? 1'b1 : 1'b0);

assign exitcond2312_fu_441_p2 = ((empty_reg_365 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond7_0_fu_847_p2 = ((ap_phi_mux_loop_index_0_phi_fu_426_p4 == 6'd32) ? 1'b1 : 1'b0);

assign grp_fu_512_p1 = 32'd136;

assign grp_fu_530_p0 = 65'd8084644322;

assign grp_keccakf_1_fu_434_ap_start = grp_keccakf_1_fu_434_ap_start_reg;

assign i_cast5_fu_503_p1 = i_reg_387_pp2_iter1_reg;

assign i_cast_fu_488_p1 = ap_phi_mux_i_phi_fu_391_p4;

assign icmp_ln129_fu_597_p2 = (($signed(zext_ln129_fu_593_p1) < $signed(blocks_reg_986)) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_721_p2 = ((x_reg_410 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln176_1_fu_492_p2 = ((i_cast_fu_488_p1 == trunc_ln176_reg_940) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_475_p2 = (($signed(l_read_reg_898) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_521_p2 = ((trunc_ln185_fu_517_p1 == 9'd0) ? 1'b1 : 1'b0);

assign or_ln133_1_fu_762_p2 = (shl_ln1_reg_1018 | 8'd2);

assign or_ln133_2_fu_772_p2 = (shl_ln1_reg_1018 | 8'd3);

assign or_ln133_3_fu_782_p2 = (shl_ln1_reg_1018 | 8'd4);

assign or_ln133_4_fu_792_p2 = (shl_ln1_reg_1018 | 8'd5);

assign or_ln133_5_fu_807_p2 = (shl_ln1_reg_1018 | 8'd6);

assign or_ln133_6_fu_817_p2 = (shl_ln1_reg_1018 | 8'd7);

assign or_ln133_fu_751_p2 = (shl_ln1_fu_738_p3 | 8'd1);

assign or_ln133_s_fu_827_p9 = {{{{{{{{P_q1}, {P_q0}}, {P_load_5_reg_1088}}, {P_load_4_reg_1083}}, {P_load_3_reg_1063}}, {P_load_2_reg_1058}}, {P_load_1_reg_1043}}, {P_load_reg_1038}};

assign p_cast1_fu_859_p4 = {{ap_phi_mux_loop_index_0_phi_fu_426_p4[4:3]}};

assign p_cast2_fu_470_p1 = empty_25_reg_376;

assign p_cast3_fu_453_p1 = empty_reg_365;

assign p_cast7_fu_869_p1 = p_cast1_fu_859_p4;

assign p_cast8_fu_880_p1 = empty_35_fu_874_p2;

assign select_ln126_1_fu_580_p3 = ((tmp_reg_969[0:0] === 1'b1) ? sub_ln126_1_fu_574_p2 : tmp_7_reg_980);

assign select_ln126_fu_568_p3 = ((tmp_reg_969[0:0] === 1'b1) ? tmp_6_fu_558_p4 : tmp_7_reg_980);

assign select_ln130_fu_708_p3 = ((tmp_8_fu_668_p3[0:0] === 1'b1) ? sub_ln130_1_fu_692_p2 : trunc_ln130_4_fu_698_p4);

assign shl_ln130_1_fu_620_p3 = {{y_reg_399}, {6'd0}};

assign shl_ln1_fu_738_p3 = {{add_ln133_fu_733_p2}, {3'd0}};

assign shl_ln_fu_612_p3 = {{trunc_ln130_fu_608_p1}, {10'd0}};

assign sub_ln126_1_fu_574_p2 = (25'd0 - select_ln126_fu_568_p3);

assign sub_ln126_fu_553_p2 = (65'd0 - mul_ln126_reg_975);

assign sub_ln130_1_fu_692_p2 = (5'd0 - trunc_ln130_3_fu_682_p4);

assign sub_ln130_fu_676_p2 = (11'd0 - add_ln130_1_fu_662_p2);

assign tmp_6_fu_558_p4 = {{sub_ln126_fu_553_p2[64:40]}};

assign tmp_8_fu_668_p3 = add_ln130_fu_656_p2[32'd31];

assign trunc_ln130_1_fu_636_p3 = {{trunc_ln130_5_fu_632_p1}, {6'd0}};

assign trunc_ln130_2_fu_648_p3 = {{trunc_ln130_6_fu_644_p1}, {10'd0}};

assign trunc_ln130_3_fu_682_p4 = {{sub_ln130_fu_676_p2[10:6]}};

assign trunc_ln130_4_fu_698_p4 = {{add_ln130_1_fu_662_p2[10:6]}};

assign trunc_ln130_5_fu_632_p1 = y_reg_399[4:0];

assign trunc_ln130_6_fu_644_p1 = y_reg_399[0:0];

assign trunc_ln130_fu_608_p1 = y_reg_399[21:0];

assign trunc_ln176_fu_485_p1 = l_read_reg_898[30:0];

assign trunc_ln185_fu_517_p1 = grp_fu_512_p2[8:0];

assign xor_ln133_fu_841_p2 = (or_ln133_s_fu_827_p9 ^ A_q0);

assign y_1_fu_602_p2 = (y_reg_399 + 24'd1);

assign zext_ln129_fu_593_p1 = y_reg_399;

assign zext_ln130_fu_628_p1 = shl_ln130_1_fu_620_p3;

assign zext_ln133_1_fu_746_p1 = shl_ln1_fu_738_p3;

assign zext_ln133_2_fu_757_p1 = or_ln133_fu_751_p2;

assign zext_ln133_3_fu_767_p1 = or_ln133_1_fu_762_p2;

assign zext_ln133_4_fu_777_p1 = or_ln133_2_fu_772_p2;

assign zext_ln133_5_fu_787_p1 = or_ln133_3_fu_782_p2;

assign zext_ln133_6_fu_797_p1 = or_ln133_4_fu_792_p2;

assign zext_ln133_7_fu_812_p1 = or_ln133_5_fu_807_p2;

assign zext_ln133_8_fu_822_p1 = or_ln133_6_fu_817_p2;

assign zext_ln133_fu_802_p1 = x_reg_410;

assign zext_ln181_fu_508_p1 = l_read_reg_898;

always @ (posedge ap_clk) begin
    shl_ln1_reg_1018[2:0] <= 3'b000;
end

endmodule //keccak_256
