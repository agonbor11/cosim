// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_matmul,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=146,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2807,HLS_SYN_LUT=2363,HLS_VERSION=2020_1}" *)

module matmul (
        ap_clk,
        ap_rst_n,
        m_axi_data_AWVALID,
        m_axi_data_AWREADY,
        m_axi_data_AWADDR,
        m_axi_data_AWID,
        m_axi_data_AWLEN,
        m_axi_data_AWSIZE,
        m_axi_data_AWBURST,
        m_axi_data_AWLOCK,
        m_axi_data_AWCACHE,
        m_axi_data_AWPROT,
        m_axi_data_AWQOS,
        m_axi_data_AWREGION,
        m_axi_data_AWUSER,
        m_axi_data_WVALID,
        m_axi_data_WREADY,
        m_axi_data_WDATA,
        m_axi_data_WSTRB,
        m_axi_data_WLAST,
        m_axi_data_WID,
        m_axi_data_WUSER,
        m_axi_data_ARVALID,
        m_axi_data_ARREADY,
        m_axi_data_ARADDR,
        m_axi_data_ARID,
        m_axi_data_ARLEN,
        m_axi_data_ARSIZE,
        m_axi_data_ARBURST,
        m_axi_data_ARLOCK,
        m_axi_data_ARCACHE,
        m_axi_data_ARPROT,
        m_axi_data_ARQOS,
        m_axi_data_ARREGION,
        m_axi_data_ARUSER,
        m_axi_data_RVALID,
        m_axi_data_RREADY,
        m_axi_data_RDATA,
        m_axi_data_RLAST,
        m_axi_data_RID,
        m_axi_data_RUSER,
        m_axi_data_RRESP,
        m_axi_data_BVALID,
        m_axi_data_BREADY,
        m_axi_data_BRESP,
        m_axi_data_BID,
        m_axi_data_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_pp0_stage0 = 15'd4;
parameter    ap_ST_fsm_pp0_stage1 = 15'd8;
parameter    ap_ST_fsm_pp0_stage2 = 15'd16;
parameter    ap_ST_fsm_pp0_stage3 = 15'd32;
parameter    ap_ST_fsm_pp0_stage4 = 15'd64;
parameter    ap_ST_fsm_pp0_stage5 = 15'd128;
parameter    ap_ST_fsm_pp0_stage6 = 15'd256;
parameter    ap_ST_fsm_pp0_stage7 = 15'd512;
parameter    ap_ST_fsm_state23 = 15'd1024;
parameter    ap_ST_fsm_state24 = 15'd2048;
parameter    ap_ST_fsm_state25 = 15'd4096;
parameter    ap_ST_fsm_state26 = 15'd8192;
parameter    ap_ST_fsm_state27 = 15'd16384;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_USER_VALUE = 0;
parameter    C_M_AXI_DATA_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_AWVALID;
input   m_axi_data_AWREADY;
output  [C_M_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_data_AWADDR;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_AWID;
output  [7:0] m_axi_data_AWLEN;
output  [2:0] m_axi_data_AWSIZE;
output  [1:0] m_axi_data_AWBURST;
output  [1:0] m_axi_data_AWLOCK;
output  [3:0] m_axi_data_AWCACHE;
output  [2:0] m_axi_data_AWPROT;
output  [3:0] m_axi_data_AWQOS;
output  [3:0] m_axi_data_AWREGION;
output  [C_M_AXI_DATA_AWUSER_WIDTH - 1:0] m_axi_data_AWUSER;
output   m_axi_data_WVALID;
input   m_axi_data_WREADY;
output  [C_M_AXI_DATA_DATA_WIDTH - 1:0] m_axi_data_WDATA;
output  [C_M_AXI_DATA_WSTRB_WIDTH - 1:0] m_axi_data_WSTRB;
output   m_axi_data_WLAST;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_WID;
output  [C_M_AXI_DATA_WUSER_WIDTH - 1:0] m_axi_data_WUSER;
output   m_axi_data_ARVALID;
input   m_axi_data_ARREADY;
output  [C_M_AXI_DATA_ADDR_WIDTH - 1:0] m_axi_data_ARADDR;
output  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_ARID;
output  [7:0] m_axi_data_ARLEN;
output  [2:0] m_axi_data_ARSIZE;
output  [1:0] m_axi_data_ARBURST;
output  [1:0] m_axi_data_ARLOCK;
output  [3:0] m_axi_data_ARCACHE;
output  [2:0] m_axi_data_ARPROT;
output  [3:0] m_axi_data_ARQOS;
output  [3:0] m_axi_data_ARREGION;
output  [C_M_AXI_DATA_ARUSER_WIDTH - 1:0] m_axi_data_ARUSER;
input   m_axi_data_RVALID;
output   m_axi_data_RREADY;
input  [C_M_AXI_DATA_DATA_WIDTH - 1:0] m_axi_data_RDATA;
input   m_axi_data_RLAST;
input  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_RID;
input  [C_M_AXI_DATA_RUSER_WIDTH - 1:0] m_axi_data_RUSER;
input  [1:0] m_axi_data_RRESP;
input   m_axi_data_BVALID;
output   m_axi_data_BREADY;
input  [1:0] m_axi_data_BRESP;
input  [C_M_AXI_DATA_ID_WIDTH - 1:0] m_axi_data_BID;
input  [C_M_AXI_DATA_BUSER_WIDTH - 1:0] m_axi_data_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] a;
wire   [63:0] b;
wire   [63:0] c;
reg    data_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    data_blk_n_W;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage3;
reg   [0:0] icmp_ln7_reg_626;
reg   [0:0] icmp_ln7_reg_626_pp0_iter2_reg;
reg    data_blk_n_B;
wire    ap_CS_fsm_state27;
reg    data_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg    data_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln7_reg_626_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
reg    data_AWVALID;
wire    data_AWREADY;
reg    data_WVALID;
wire    data_WREADY;
reg    data_ARVALID;
wire    data_ARREADY;
reg   [63:0] data_ARADDR;
wire    data_RVALID;
reg    data_RREADY;
wire   [31:0] data_RDATA;
wire    data_RLAST;
wire   [0:0] data_RID;
wire   [0:0] data_RUSER;
wire   [1:0] data_RRESP;
wire    data_BVALID;
reg    data_BREADY;
wire   [1:0] data_BRESP;
wire   [0:0] data_BID;
wire   [0:0] data_BUSER;
reg   [4:0] indvar_flatten_reg_238;
reg   [2:0] i_reg_249;
reg   [2:0] j_reg_261;
reg   [63:0] b_read_reg_609;
reg   [63:0] a_read_reg_614;
reg   [63:0] data_addr_reg_620;
wire   [0:0] icmp_ln7_fu_324_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
reg    ap_block_state11_io;
wire    ap_block_state19_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln7_fu_330_p2;
reg   [4:0] add_ln7_reg_630;
wire   [0:0] icmp_ln8_fu_336_p2;
reg   [0:0] icmp_ln8_reg_635;
wire   [2:0] add_ln7_4_fu_342_p2;
reg   [2:0] add_ln7_4_reg_641;
wire  signed [61:0] select_ln7_1_fu_379_p3;
reg  signed [61:0] select_ln7_1_reg_646;
wire   [2:0] select_ln7_fu_387_p3;
reg   [2:0] select_ln7_reg_652;
wire    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_state4_io;
reg    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_state20_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
wire   [63:0] add_ln11_fu_420_p2;
reg   [63:0] add_ln11_reg_663;
reg   [63:0] data_addr_2_reg_670;
wire  signed [62:0] sext_ln7_2_fu_445_p1;
reg  signed [62:0] sext_ln7_2_reg_676;
wire    ap_block_state5_pp0_stage2_iter0;
reg    ap_block_state5_io;
reg    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_state21_pp0_stage2_iter2;
reg    ap_block_pp0_stage2_11001;
reg   [63:0] data_addr_3_reg_682;
reg   [63:0] data_addr_4_reg_688;
wire    ap_block_state6_pp0_stage3_iter0;
reg    ap_block_state6_io;
reg    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_state22_pp0_stage3_iter2;
reg    ap_block_state22_io;
reg    ap_block_pp0_stage3_11001;
reg   [63:0] data_addr_5_reg_694;
wire    ap_block_state7_pp0_stage4_iter0;
reg    ap_block_state7_io;
reg    ap_block_state15_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
reg   [63:0] data_addr_7_reg_700;
reg   [63:0] data_addr_6_reg_706;
wire    ap_block_state8_pp0_stage5_iter0;
reg    ap_block_state8_io;
reg    ap_block_state16_pp0_stage5_iter1;
reg    ap_block_pp0_stage5_11001;
reg   [63:0] data_addr_8_reg_712;
wire   [2:0] select_ln7_2_fu_569_p3;
reg   [2:0] select_ln7_2_reg_718;
wire    ap_block_state10_pp0_stage7_iter0;
reg    ap_block_state10_io;
reg    ap_block_state18_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_11001;
wire   [2:0] add_ln8_1_fu_575_p2;
reg   [2:0] add_ln8_1_reg_723;
reg  signed [31:0] data_addr_1_read_reg_728;
reg  signed [31:0] data_addr_2_read_reg_733;
reg  signed [31:0] data_addr_3_read_reg_738;
wire   [31:0] grp_fu_580_p2;
reg   [31:0] mul_ln11_reg_743;
reg  signed [31:0] data_addr_4_read_reg_748;
reg  signed [31:0] data_addr_5_read_reg_753;
wire   [31:0] grp_fu_584_p2;
reg   [31:0] mul_ln11_1_reg_758;
reg  signed [31:0] data_addr_6_read_reg_763;
reg  signed [31:0] data_addr_7_read_reg_768;
wire    ap_block_state9_pp0_stage6_iter0;
reg    ap_block_state9_io;
reg    ap_block_state17_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
wire   [31:0] add_ln11_4_fu_592_p2;
reg   [31:0] add_ln11_4_reg_773;
wire   [31:0] grp_fu_588_p2;
reg   [31:0] mul_ln11_2_reg_778;
reg  signed [31:0] data_addr_8_read_reg_783;
wire   [31:0] grp_fu_596_p2;
reg   [31:0] mul_ln11_3_reg_788;
wire   [31:0] add_ln11_6_fu_604_p2;
reg   [31:0] add_ln11_6_reg_793;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage3_subdone;
reg   [4:0] ap_phi_mux_indvar_flatten_phi_fu_242_p4;
reg   [2:0] ap_phi_mux_i_phi_fu_253_p4;
reg   [2:0] ap_phi_mux_j_phi_fu_265_p4;
wire  signed [63:0] sext_ln7_fu_283_p1;
wire  signed [63:0] sext_ln7_1_fu_394_p1;
wire  signed [63:0] sext_ln11_fu_435_p1;
wire  signed [63:0] sext_ln7_3_fu_454_p1;
wire  signed [63:0] sext_ln11_1_fu_479_p1;
wire  signed [63:0] sext_ln7_4_fu_494_p1;
wire  signed [63:0] sext_ln7_5_fu_503_p1;
wire  signed [63:0] sext_ln11_2_fu_534_p1;
wire  signed [63:0] sext_ln11_3_fu_559_p1;
reg    ap_block_pp0_stage3_01001;
wire   [61:0] trunc_ln7_fu_273_p4;
wire   [1:0] trunc_ln8_fu_293_p1;
wire   [5:0] shl_ln8_fu_297_p3;
wire   [63:0] zext_ln8_fu_305_p1;
wire   [63:0] add_ln8_fu_309_p2;
wire   [1:0] trunc_ln8_1_fu_348_p1;
wire   [5:0] shl_ln8_mid1_fu_352_p3;
wire   [63:0] zext_ln8_1_fu_360_p1;
wire   [63:0] add_ln8_2_fu_364_p2;
wire   [61:0] trunc_ln10_mid1_fu_369_p4;
wire   [61:0] trunc_ln_fu_314_p4;
wire   [1:0] trunc_ln11_fu_397_p1;
wire   [3:0] shl_ln_fu_401_p3;
wire   [63:0] zext_ln11_fu_409_p1;
wire   [61:0] trunc_ln1_fu_425_p4;
wire   [62:0] add_ln7_1_fu_448_p2;
wire   [63:0] add_ln11_1_fu_464_p2;
wire   [61:0] trunc_ln11_1_fu_469_p4;
wire   [62:0] add_ln7_2_fu_489_p2;
wire   [62:0] add_ln7_3_fu_498_p2;
wire   [63:0] add_ln11_2_fu_519_p2;
wire   [61:0] trunc_ln11_2_fu_524_p4;
wire   [63:0] add_ln11_3_fu_544_p2;
wire   [61:0] trunc_ln11_3_fu_549_p4;
wire   [31:0] add_ln11_5_fu_600_p2;
reg    grp_fu_580_ce;
reg    grp_fu_584_ce;
reg    grp_fu_588_ce;
reg    grp_fu_596_ce;
reg   [14:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_606;
reg    ap_condition_608;
reg    ap_condition_611;
reg    ap_condition_614;
reg    ap_condition_617;
reg    ap_condition_620;
reg    ap_condition_505;
reg    ap_condition_586;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

matmul_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a(a),
    .b(b),
    .c(c),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

matmul_data_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_CACHE_VALUE ))
data_m_axi_U(
    .AWVALID(m_axi_data_AWVALID),
    .AWREADY(m_axi_data_AWREADY),
    .AWADDR(m_axi_data_AWADDR),
    .AWID(m_axi_data_AWID),
    .AWLEN(m_axi_data_AWLEN),
    .AWSIZE(m_axi_data_AWSIZE),
    .AWBURST(m_axi_data_AWBURST),
    .AWLOCK(m_axi_data_AWLOCK),
    .AWCACHE(m_axi_data_AWCACHE),
    .AWPROT(m_axi_data_AWPROT),
    .AWQOS(m_axi_data_AWQOS),
    .AWREGION(m_axi_data_AWREGION),
    .AWUSER(m_axi_data_AWUSER),
    .WVALID(m_axi_data_WVALID),
    .WREADY(m_axi_data_WREADY),
    .WDATA(m_axi_data_WDATA),
    .WSTRB(m_axi_data_WSTRB),
    .WLAST(m_axi_data_WLAST),
    .WID(m_axi_data_WID),
    .WUSER(m_axi_data_WUSER),
    .ARVALID(m_axi_data_ARVALID),
    .ARREADY(m_axi_data_ARREADY),
    .ARADDR(m_axi_data_ARADDR),
    .ARID(m_axi_data_ARID),
    .ARLEN(m_axi_data_ARLEN),
    .ARSIZE(m_axi_data_ARSIZE),
    .ARBURST(m_axi_data_ARBURST),
    .ARLOCK(m_axi_data_ARLOCK),
    .ARCACHE(m_axi_data_ARCACHE),
    .ARPROT(m_axi_data_ARPROT),
    .ARQOS(m_axi_data_ARQOS),
    .ARREGION(m_axi_data_ARREGION),
    .ARUSER(m_axi_data_ARUSER),
    .RVALID(m_axi_data_RVALID),
    .RREADY(m_axi_data_RREADY),
    .RDATA(m_axi_data_RDATA),
    .RLAST(m_axi_data_RLAST),
    .RID(m_axi_data_RID),
    .RUSER(m_axi_data_RUSER),
    .RRESP(m_axi_data_RRESP),
    .BVALID(m_axi_data_BVALID),
    .BREADY(m_axi_data_BREADY),
    .BRESP(m_axi_data_BRESP),
    .BID(m_axi_data_BID),
    .BUSER(m_axi_data_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data_ARVALID),
    .I_ARREADY(data_ARREADY),
    .I_ARADDR(data_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(data_RVALID),
    .I_RREADY(data_RREADY),
    .I_RDATA(data_RDATA),
    .I_RID(data_RID),
    .I_RUSER(data_RUSER),
    .I_RRESP(data_RRESP),
    .I_RLAST(data_RLAST),
    .I_AWVALID(data_AWVALID),
    .I_AWREADY(data_AWREADY),
    .I_AWADDR(data_addr_reg_620),
    .I_AWID(1'd0),
    .I_AWLEN(32'd16),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(data_WVALID),
    .I_WREADY(data_WREADY),
    .I_WDATA(add_ln11_6_reg_793),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(data_BVALID),
    .I_BREADY(data_BREADY),
    .I_BRESP(data_BRESP),
    .I_BID(data_BID),
    .I_BUSER(data_BUSER)
);

matmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data_addr_2_read_reg_733),
    .din1(data_addr_1_read_reg_728),
    .ce(grp_fu_580_ce),
    .dout(grp_fu_580_p2)
);

matmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data_addr_4_read_reg_748),
    .din1(data_addr_3_read_reg_738),
    .ce(grp_fu_584_ce),
    .dout(grp_fu_584_p2)
);

matmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data_addr_6_read_reg_763),
    .din1(data_addr_5_read_reg_753),
    .ce(grp_fu_588_ce),
    .dout(grp_fu_588_p2)
);

matmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data_addr_8_read_reg_783),
    .din1(data_addr_7_read_reg_768),
    .ce(grp_fu_596_ce),
    .dout(grp_fu_596_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_249 <= select_ln7_2_reg_718;
    end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_249 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_238 <= add_ln7_reg_630;
    end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_238 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_261 <= add_ln8_1_reg_723;
    end else if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_261 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        a_read_reg_614 <= a;
        b_read_reg_609 <= b;
        data_addr_reg_620 <= sext_ln7_fu_283_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        add_ln11_4_reg_773 <= add_ln11_4_fu_592_p2;
        data_addr_7_read_reg_768 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln7_reg_626_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln11_6_reg_793 <= add_ln11_6_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln11_reg_663 <= add_ln11_fu_420_p2;
        data_addr_2_reg_670 <= sext_ln11_fu_435_p1;
        select_ln7_reg_652 <= select_ln7_fu_387_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln7_4_reg_641 <= add_ln7_4_fu_342_p2;
        icmp_ln8_reg_635 <= icmp_ln8_fu_336_p2;
        select_ln7_1_reg_646 <= select_ln7_1_fu_379_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln7_reg_630 <= add_ln7_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        add_ln8_1_reg_723 <= add_ln8_1_fu_575_p2;
        select_ln7_2_reg_718 <= select_ln7_2_fu_569_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_addr_1_read_reg_728 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        data_addr_2_read_reg_733 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        data_addr_3_read_reg_738 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        data_addr_3_reg_682 <= sext_ln7_3_fu_454_p1;
        sext_ln7_2_reg_676 <= sext_ln7_2_fu_445_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        data_addr_4_read_reg_748 <= data_RDATA;
        mul_ln11_reg_743 <= grp_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        data_addr_4_reg_688 <= sext_ln11_1_fu_479_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        data_addr_5_read_reg_753 <= data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        data_addr_5_reg_694 <= sext_ln7_4_fu_494_p1;
        data_addr_7_reg_700 <= sext_ln7_5_fu_503_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        data_addr_6_read_reg_763 <= data_RDATA;
        mul_ln11_1_reg_758 <= grp_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        data_addr_6_reg_706 <= sext_ln11_2_fu_534_p1;
        data_addr_8_reg_712 <= sext_ln11_3_fu_559_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        data_addr_8_read_reg_783 <= data_RDATA;
        mul_ln11_2_reg_778 <= grp_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln7_reg_626 <= icmp_ln7_fu_324_p2;
        icmp_ln7_reg_626_pp0_iter1_reg <= icmp_ln7_reg_626;
        icmp_ln7_reg_626_pp0_iter2_reg <= icmp_ln7_reg_626_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln7_reg_626_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mul_ln11_3_reg_788 <= grp_fu_596_p2;
    end
end

always @ (*) begin
    if ((icmp_ln7_fu_324_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_253_p4 = select_ln7_2_reg_718;
    end else begin
        ap_phi_mux_i_phi_fu_253_p4 = i_reg_249;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_242_p4 = add_ln7_reg_630;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_242_p4 = indvar_flatten_reg_238;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_265_p4 = add_ln8_1_reg_723;
    end else begin
        ap_phi_mux_j_phi_fu_265_p4 = j_reg_261;
    end
end

always @ (*) begin
    if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln7_reg_626 == 1'd0)) begin
        if ((1'b1 == ap_condition_586)) begin
            data_ARADDR = data_addr_8_reg_712;
        end else if ((1'b1 == ap_condition_505)) begin
            data_ARADDR = data_addr_7_reg_700;
        end else if ((1'b1 == ap_condition_620)) begin
            data_ARADDR = data_addr_6_reg_706;
        end else if ((1'b1 == ap_condition_617)) begin
            data_ARADDR = data_addr_5_reg_694;
        end else if ((1'b1 == ap_condition_614)) begin
            data_ARADDR = data_addr_4_reg_688;
        end else if ((1'b1 == ap_condition_611)) begin
            data_ARADDR = data_addr_3_reg_682;
        end else if ((1'b1 == ap_condition_608)) begin
            data_ARADDR = data_addr_2_reg_670;
        end else if ((1'b1 == ap_condition_606)) begin
            data_ARADDR = sext_ln7_1_fu_394_p1;
        end else begin
            data_ARADDR = 'bx;
        end
    end else begin
        data_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        data_ARVALID = 1'b1;
    end else begin
        data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_AWVALID = 1'b1;
    end else begin
        data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        data_BREADY = 1'b1;
    end else begin
        data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        data_RREADY = 1'b1;
    end else begin
        data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln7_reg_626_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_WVALID = 1'b1;
    end else begin
        data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage7)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage3)))) begin
        data_blk_n_AR = m_axi_data_ARREADY;
    end else begin
        data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_blk_n_AW = m_axi_data_AWREADY;
    end else begin
        data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        data_blk_n_B = m_axi_data_BVALID;
    end else begin
        data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln7_reg_626 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3)))) begin
        data_blk_n_R = m_axi_data_RVALID;
    end else begin
        data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln7_reg_626_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_blk_n_W = m_axi_data_WREADY;
    end else begin
        data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        grp_fu_580_ce = 1'b1;
    end else begin
        grp_fu_580_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        grp_fu_584_ce = 1'b1;
    end else begin
        grp_fu_584_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)))) begin
        grp_fu_588_ce = 1'b1;
    end else begin
        grp_fu_588_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_596_ce = 1'b1;
    end else begin
        grp_fu_596_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((data_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln7_fu_324_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln7_fu_324_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((data_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_464_p2 = (64'd16 + add_ln11_reg_663);

assign add_ln11_2_fu_519_p2 = (64'd32 + add_ln11_reg_663);

assign add_ln11_3_fu_544_p2 = (64'd48 + add_ln11_reg_663);

assign add_ln11_4_fu_592_p2 = (mul_ln11_1_reg_758 + mul_ln11_reg_743);

assign add_ln11_5_fu_600_p2 = (mul_ln11_3_reg_788 + mul_ln11_2_reg_778);

assign add_ln11_6_fu_604_p2 = (add_ln11_4_reg_773 + add_ln11_5_fu_600_p2);

assign add_ln11_fu_420_p2 = (b_read_reg_609 + zext_ln11_fu_409_p1);

assign add_ln7_1_fu_448_p2 = ($signed(63'd1) + $signed(sext_ln7_2_fu_445_p1));

assign add_ln7_2_fu_489_p2 = ($signed(63'd2) + $signed(sext_ln7_2_reg_676));

assign add_ln7_3_fu_498_p2 = ($signed(63'd3) + $signed(sext_ln7_2_reg_676));

assign add_ln7_4_fu_342_p2 = (3'd1 + ap_phi_mux_i_phi_fu_253_p4);

assign add_ln7_fu_330_p2 = (5'd1 + ap_phi_mux_indvar_flatten_phi_fu_242_p4);

assign add_ln8_1_fu_575_p2 = (3'd1 + select_ln7_reg_652);

assign add_ln8_2_fu_364_p2 = (a_read_reg_614 + zext_ln8_1_fu_360_p1);

assign add_ln8_fu_309_p2 = (a_read_reg_614 + zext_ln8_fu_305_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd14];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626 == 1'd0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_io = ((data_ARREADY == 1'b0) & (icmp_ln7_reg_626 == 1'd0));
end

assign ap_block_state10_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((data_ARREADY == 1'b0) & (icmp_ln7_reg_626 == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((data_RVALID == 1'b0) & (icmp_ln7_reg_626 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp0_stage1_iter1 = ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp0_stage2_iter1 = ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp0_stage3_iter1 = ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp0_stage4_iter1 = ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp0_stage5_iter1 = ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp0_stage6_iter1 = ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp0_stage7_iter1 = ((data_RVALID == 1'b0) & (icmp_ln7_reg_626_pp0_iter1_reg == 1'd0));
end

assign ap_block_state19_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = ((data_WREADY == 1'b0) & (icmp_ln7_reg_626_pp0_iter2_reg == 1'd0));
end

assign ap_block_state22_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((data_ARREADY == 1'b0) & (icmp_ln7_reg_626 == 1'd0));
end

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((data_ARREADY == 1'b0) & (icmp_ln7_reg_626 == 1'd0));
end

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((data_ARREADY == 1'b0) & (icmp_ln7_reg_626 == 1'd0));
end

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((data_ARREADY == 1'b0) & (icmp_ln7_reg_626 == 1'd0));
end

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((data_ARREADY == 1'b0) & (icmp_ln7_reg_626 == 1'd0));
end

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((data_ARREADY == 1'b0) & (icmp_ln7_reg_626 == 1'd0));
end

assign ap_block_state9_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_505 = ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001));
end

always @ (*) begin
    ap_condition_586 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_606 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_608 = ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001));
end

always @ (*) begin
    ap_condition_611 = ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001));
end

always @ (*) begin
    ap_condition_614 = ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001));
end

always @ (*) begin
    ap_condition_617 = ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001));
end

always @ (*) begin
    ap_condition_620 = ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln7_fu_324_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_242_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_336_p2 = ((ap_phi_mux_j_phi_fu_265_p4 == 3'd4) ? 1'b1 : 1'b0);

assign select_ln7_1_fu_379_p3 = ((icmp_ln8_fu_336_p2[0:0] === 1'b1) ? trunc_ln10_mid1_fu_369_p4 : trunc_ln_fu_314_p4);

assign select_ln7_2_fu_569_p3 = ((icmp_ln8_reg_635[0:0] === 1'b1) ? add_ln7_4_reg_641 : i_reg_249);

assign select_ln7_fu_387_p3 = ((icmp_ln8_reg_635[0:0] === 1'b1) ? 3'd0 : j_reg_261);

assign sext_ln11_1_fu_479_p1 = $signed(trunc_ln11_1_fu_469_p4);

assign sext_ln11_2_fu_534_p1 = $signed(trunc_ln11_2_fu_524_p4);

assign sext_ln11_3_fu_559_p1 = $signed(trunc_ln11_3_fu_549_p4);

assign sext_ln11_fu_435_p1 = $signed(trunc_ln1_fu_425_p4);

assign sext_ln7_1_fu_394_p1 = select_ln7_1_reg_646;

assign sext_ln7_2_fu_445_p1 = select_ln7_1_reg_646;

assign sext_ln7_3_fu_454_p1 = $signed(add_ln7_1_fu_448_p2);

assign sext_ln7_4_fu_494_p1 = $signed(add_ln7_2_fu_489_p2);

assign sext_ln7_5_fu_503_p1 = $signed(add_ln7_3_fu_498_p2);

assign sext_ln7_fu_283_p1 = $signed(trunc_ln7_fu_273_p4);

assign shl_ln8_fu_297_p3 = {{trunc_ln8_fu_293_p1}, {4'd0}};

assign shl_ln8_mid1_fu_352_p3 = {{trunc_ln8_1_fu_348_p1}, {4'd0}};

assign shl_ln_fu_401_p3 = {{trunc_ln11_fu_397_p1}, {2'd0}};

assign trunc_ln10_mid1_fu_369_p4 = {{add_ln8_2_fu_364_p2[63:2]}};

assign trunc_ln11_1_fu_469_p4 = {{add_ln11_1_fu_464_p2[63:2]}};

assign trunc_ln11_2_fu_524_p4 = {{add_ln11_2_fu_519_p2[63:2]}};

assign trunc_ln11_3_fu_549_p4 = {{add_ln11_3_fu_544_p2[63:2]}};

assign trunc_ln11_fu_397_p1 = select_ln7_fu_387_p3[1:0];

assign trunc_ln1_fu_425_p4 = {{add_ln11_fu_420_p2[63:2]}};

assign trunc_ln7_fu_273_p4 = {{c[63:2]}};

assign trunc_ln8_1_fu_348_p1 = add_ln7_4_fu_342_p2[1:0];

assign trunc_ln8_fu_293_p1 = ap_phi_mux_i_phi_fu_253_p4[1:0];

assign trunc_ln_fu_314_p4 = {{add_ln8_fu_309_p2[63:2]}};

assign zext_ln11_fu_409_p1 = shl_ln_fu_401_p3;

assign zext_ln8_1_fu_360_p1 = shl_ln8_mid1_fu_352_p3;

assign zext_ln8_fu_305_p1 = shl_ln8_fu_297_p3;

endmodule //matmul
